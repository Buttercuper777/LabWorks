unit HobLibrary;

interface
uses
  System.SysUtils;

  type
  pElem = ^Elem;
  Elem = record
    key: integer;
    next: pElem;
  end;
  const
  m = 20;
  G = 19;


var
  mas: array [0..1000] of pElem;
  mas2: array [0..1000] of integer;
  index: integer;
  t_val, u_val: integer;

procedure AddElem(out out_pos:integer; key:integer);
function h(t, u, G, x, R:integer): integer;
function FindElem(key:integer):string;

implementation

function h(t, u, G, x, R:integer): integer;
var
  z: integer;
begin
z := (((t*x)+u) mod G) mod R;
h := z;
end;

procedure DeleteElem(key:integer);
var position, i, j: integer;
    p,table: pElem;
    s, s2: string;
begin
   j := 0;
   position := h(t_val, u_val, G, key, M) + 1;
   table := mas[position];
   while table <> nil do
   begin
     if table^.key = key then
     begin
       table^.key := -1;
       s:=Form1.StringGrid1.Cells[2,position];
       s2 := IntToStr(key);
       i := Length(s2) + 1;
       if Form1.StringGrid1.Cells[2,(Pos(IntToStr(key),Form1.StringGrid1.Cells[2,position])-1)] = ',' then
        delete(s,Pos(IntToStr(key),Form1.StringGrid1.Cells[2,position])-1,i)
       else delete(s,Pos(IntToStr(key),Form1.StringGrid1.Cells[2,position]),i);
        Form1.StringGrid1.Cells[2,position]:=s;
       Form1.StringGrid1.Cells[3,position] := IntToStr(StrToInt(Form1.StringGrid1.Cells[3,position])-1);

       repeat
         begin
           if mas2[j] = key then mas2[j] := -1;
           inc(j);
         end
       until mas2[j] <> key;
       break;
     end
     else
     table:=table^.next;
   end;
end;


function FindElem(key:integer):string;
var position: integer;
    table, p: pElem;
    find: boolean;
begin
    find:=false;
    position := h(t_val, u_val, G, key, M) + 1;
    table := mas[position];
    while (find = false) and (table <> nil) do
    begin
      if table^.key = key then find:=true;
      table:=table^.next;
    end;
    if not find then
      FindElem := 'Ничего не найдено'
    else
      FindElem := 'Найдено в строке '+ inttostr(position);
end;

procedure AddElem(out out_pos:integer; key:integer);
var position:integer;
    p,table: pElem;
begin
    position := h(t_val, u_val, G, key, M) + 1;
    out_pos := position;
    GetMem(p,sizeof(Elem));
    p^.key := key;
    p^.next := nil;
    table := mas[position];
    if table = nil then
      mas[position]:= p
    else
    begin
       while (table^.next<>nil) do
       begin
         table := table^.next;
       end;
       table^.next := p;
    end;
end;


end.
