unit MainLib;

interface
uses
  System.SysUtils,
  Vcl.Dialogs;


Type
  TIndex = Integer; { Тип указателя на узел. }
  TPItem = ^TItem; { Тип узла дерева. }

  IndexList = array[1..50] of integer;


  TItem = record
    Index: TIndex; { Ключ (основные данные) узла дерева. }
    IndexPointer: IndexList; { Указатели на левый и правый узел. }
end;

var
  PTree: array[1..100] of TPItem;
  visit: array [1..100] of boolean;
  out_arr: array of integer;
  C: array[1..100] of array[1..100] of integer;
  C_BFS: array[1..100] of array[1..100] of integer;
  i :integer;

procedure BFS(v:integer; n:integer);
procedure Prim(out Way, Wght:string; n:integer);
//procedure AddNode(var aPNode: TPNode; const aData: TData);
Procedure NewNode(val: integer; List:IndexList);
implementation

Procedure NewNode(val: integer; List:IndexList);
var
  ForNew: TPItem;
  i: integer;
  CheckStr: string;
begin
  New(ForNew);
  ForNew.Index := val;
  CheckStr := inttostr(ForNew.Index) + ': ';
  for i := 1 to 10 do
  begin
    ForNew.IndexPointer[i] := List[i];
    CheckStr := CheckStr + ' ' + inttostr(ForNew.IndexPointer[i]);
  end;
  //CheckStr := inttostr(ForNew.IndexPointer[1]) + ' ' + inttostr(ForNew.IndexPointer[2]);
  showMessage(CheckStr);
end;

procedure Prim(out Way, Wght:string; n:integer);
  var
  visited: array[1..10] of integer;  //массив посещенных/непосещенных вершин
  cost: array[1..10, 1..10] of integer;  //матрица смежности
  a, b, u, v, i, j, ne, min, path_index, mincost:integer;
  ti, tj:integer;
  outStr : String;
  path: array[1..100] of integer;
begin
  outStr := '1, ';
  path_index := 1;
  ne := 1;
  min := maxint; // макс значение для integer. 4 байта ~ 43*10^8.
                  {Исп как вес для дороги, которую точно следует
                  обойти в поиске наименьшего пути. Как будто этой дороги и нету}
  mincost := 0;

  for i := 1 to 10 do  // Задаем всем вершинам показатель посещения в 0
    visited[i] := 0;

  for i := 1 to n do
    for j := 1 to n do  // переносим все из матрицы на форме в матрицу-структуру данных
    begin
      cost[i,j] := C[i,j];
      if (cost[i,j] = 0) then
        cost[i, j] := maxint;
    end;

    visited[1] := 1;   // посещаем первую вершину

    while (ne < n) do  // Продолжаем пока не поситим все вершины
    begin
      min := maxint;
      for i := 1 to n do
      begin
        for j := 1 to n do
          if cost[i,j] < min then  // Если дорога существует
            if visited[i] <> 0 then   // Проверяем посещена вершина или нет. Если да, то все это дело запоминаем все это дело
            begin
              min := cost[i,j];
              u := i;
              a := u;

              v := j;
              b := v;
            end;
      end;
        if (visited[u] = 0) or (visited[v] = 0) then  // проверяем посещена вершина ab или ba
        begin
          path[path_index] := b;   // записывем вершину на вывод
          path_index := path_index + 1;
          ne := ne + 1;  // это, чтобы while не длился бесконечно. Счетчик
          mincost := mincost + min; // Обновляем стоимость
          visited[b] := 1;   // маркеруем вершину
        end;
        cost[b,a] := maxint;   // Тут дороги нет
        cost[a,b] := cost[b,a];  //Тут тоже
      end;

        for i := 1 to n-1 do   // тут работаем только с выводом. Outstr - строка которая потом идет в memo
        begin
          outStr := OutStr + inttostr(path[i]);  // формируем строку на вывод
          if (i < n - 1) then   // Проверяем может ли быть в строке после последнего '--> n ' какое-то число
            outStr := outStr + ', '; // если да, то в качестве разделителя ставим -->
        end;

        Way := outStr; // это итоговый путь
        Wght := inttostr(mincost);  // это итоговый вес }
end;

procedure BFS(v:integer; n:integer);
  var
  Q: array [1..100] of integer;
  Un,Uk: integer;
  j, add_out: integer;

  NodeVal, SaveToCheck, c1, c2: integer;
  inArr: IndexList;
begin
Un:=0; Uk:=0;
Uk:=Uk+1; Q[Uk]:=v;
add_out := 0;
Visit[v]:=false;
setlength(out_arr, n);
c1:= 1;
SaveToCheck := 1;

for j := 1 to 50 do
  inArr[j] := 0;

while Un < Uk do
begin
  Un:=Un+1; v:=Q[Un];
  inc(add_out);
  SaveToCheck := 0;
  out_arr[add_out] := v;
  for j:=0 to n do
  begin
    if (C_BFS[v,j]=1) and (Visit[j]) then
    begin
      Uk:=Uk+1; Q[Uk]:=j;
      Visit[j]:=false;
      inArr[c1] := j;
      c1 := c1 + 1;
      SaveToCheck := v;
      ShowMessage('inArr: ' + inttostr(inArr[1]) + ' ' + inttostr(inArr[2]) + ' Q[Uk] = j: ' + inttostr(j));
    end;
  end;
  NewNode(SaveToCheck, inArr);
  c1 := 1;
  end;
end;
end.
