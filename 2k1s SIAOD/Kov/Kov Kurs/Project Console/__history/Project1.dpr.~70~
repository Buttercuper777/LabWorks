program Project1;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils;

type
  TData = Integer; { Тип указателя на узел. }
  TPNode = ^TNode; { Тип узла дерева. }

  TNode = record
    Data: TData; { Ключ (основные данные) узла дерева. }
    PLeft, PRight: TPNode; { Указатели на левый и правый узел. }
  end;
  TreeArrT = array[0..100] of TData;
var
  NodeData: integer;
  TreeHead: integer;
  OutData: string;
  PTree : TPNode;

  Data: TData;
  i:integer;


procedure AddNode(var aPNode: TPNode; const aData: TData);
begin
  if aPNode = nil then { Вставка узла. }
  begin
    New(aPNode); { Выделяем память для узла. }
    aPNode^.Data := aData; { Записываем в узел значение ключа. }
    aPNode^.PLeft := nil; { Обнуляем указатель на левого потомка. }
    aPNode^.PRight := nil; { Обнуляем указатель на правого потомка. }

    TreeHead := aData;
    //showMessage('1');
  end

  else if aData <= aPNode^.Data then { Поиск места вставки в левой ветви. }
  begin
    //showMessage('left');
    AddNode(aPNode^.PLeft, aData);
    //NodeData := aPNode^.PLeft.Data;

  end

  else if aData > aPNode^.Data then { Поиск места вставки в правой ветви. }
  begin
    //showMessage('right');
    AddNode(aPNode^.PRight, aData);
    //NodeData := aPNode^.PRight.Data;

  end;
end;

function TreeWrite(const aPNode : TPNode; WriteType:char): string;
var
  DataSaver: string;
begin
  if aPNode = nil then
    exit;

  if WriteType = 's' then
  begin
    TreeWrite(aPNode^.PLeft, WriteType);
    OutData := OutData + ' ' + inttostr(aPNode^.Data);
    TreeWrite(aPNode^.PRight, WriteType);
  end
  else if WriteType = 'd' then
  begin
    OutData := OutData + ' ' + inttostr(aPNode^.Data);
    TreeWrite(aPNode^.PLeft, WriteType);
    TreeWrite(aPNode^.PRight, WriteType);
  end
  else if WriteType = 'r' then
  begin
    TreeWrite(aPNode^.PLeft, WriteType);
    TreeWrite(aPNode^.PRight, WriteType);
    OutData := OutData + ' ' + inttostr(aPNode^.Data);
  end;

  result := DataSaver;
end;

procedure FillTree(ArraySize: integer; MainArray:TreeArrT);
var
  i: integer;
begin
  for i := 1 to ArraySize do
    AddNode(PTree, MainArray[i]);
end;

begin
PTree := nil;

 for i:= 0 to 9 do
  begin
    readln(Data); // := strtoint(Memo1.Lines[i]);
    AddNode(PTree, Data);
  end;

  writeln('---------------------');
  write(TreeWrite(PTree, 'd'));
  writeln;
  write(TreeWrite(PTree, 'r'));
  writeln;
  write(TreeWrite(PTree, 's'));

  {
12
23
7
4
19
10
2
8
11
24
  }

readln;
readln;
readln;
end.
