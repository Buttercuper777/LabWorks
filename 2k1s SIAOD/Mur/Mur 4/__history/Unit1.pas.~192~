unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage;

type
  TForm1 = class(TForm)
    Image1: TImage;
    StringGrid1: TStringGrid;
    Label1: TLabel;
    Edit1: TEdit;
    Button1: TButton;
    Button2: TButton;
    Memo1: TMemo;
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    procedure tabSize(n: integer);
  end;

var
  Form1: TForm1;
  n :integer;
  visited: array[1..10] of integer;
  cost: array[1..10, 1..10] of integer;

implementation

{$R *.dfm}
procedure TForm1.tabSize(n: integer);
var
  i, j, k: integer;
begin
  StringGrid1.RowCount := n + 1;
  StringGrid1.ColCount := n + 1;
  for i := 1 to n do
  begin
    StringGrid1.Cells[0,i] := inttostr(i);
    StringGrid1.Cells[i,0] := inttostr(i);
  end;
  for k := 1 to n do
    for j := 1 to n do
      StringGrid1.Cells[k,j] := inttostr(0);
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  n:= strtoint(Edit1.Text);
  tabSize(n);
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  a, b, u, v, i, j, ne, min, min2, path_index, mincost:integer;
  ti, tj:integer;
  outStr : String;
  path: array[1..100] of integer;
begin
  outStr := '1 --> ';
  n:= strtoint(Edit1.Text);
  path_index := 1;
  ne := 1;
  min := 999;
  mincost := 0;

  for i := 1 to 10 do
  begin
    visited[i] := 0;
    //memo1.Lines.Add(inttostr(visited[i]) + ' n - ' + inttostr(n));
  end;

  for i := 1 to n do
    for j := 1 to n do
    begin
      cost[i,j] := strtoint(StringGrid1.Cells[i,j]);
      if (cost[i,j] = 0) then
        cost[i, j] := 999;
    end;

    visited[1] := 1;

    while (ne < n) do
    begin
      min := 999;
      for i := 1 to n do
      begin
        for j := 1 to n do
          if cost[i,j] < min then
            if visited[i] <> 0 then
            begin
              min := cost[i,j];
              u := i;
              a := u;

              v := j;
              b := v;
            end;
      end;
        if (visited[u] = 0) or (visited[v] = 0) then
        begin
          path[path_index] := b;
          path_index := path_index + 1;
          ne := ne + 1;
          mincost := mincost + min;
          visited[b] := 1;
        end;
        cost[b,a] := 999;
        cost[a,b] := cost[b,a];
      end;

        for i := 1 to n-1 do
        begin
          outStr := OutStr + inttostr(path[i]);
          if (i < n - 1) then
            outStr := outStr + ' --> ';
        end;

        memo1.Lines.Add(outStr);
        memo1.Lines.Add('Мин. Цена: ' + inttostr(mincost));
        //memo1.Lines.Add(inttostr(n)); }

end;

procedure TForm1.FormShow(Sender: TObject);
var
  i, j: integer;
begin
  n:= strtoint(Edit1.Text);
  tabSize(n);

  //memo1.Lines.Add(inttostr(n));
  StringGrid1.Cells[1,4] := inttostr(1);
  StringGrid1.Cells[1,5] := inttostr(3);

  StringGrid1.Cells[2,3] := inttostr(3);
  StringGrid1.Cells[2,4] := inttostr(5);
  StringGrid1.Cells[2,5] := inttostr(4);

  StringGrid1.Cells[3,2] := inttostr(3);
  StringGrid1.Cells[3,5] := inttostr(4);

  StringGrid1.Cells[4,1] := inttostr(1);
  StringGrid1.Cells[4,2] := inttostr(5);
  StringGrid1.Cells[4,5] := inttostr(2);

  StringGrid1.Cells[5,1] := inttostr(3);
  StringGrid1.Cells[5,2] := inttostr(4);
  StringGrid1.Cells[5,3] := inttostr(4);
  StringGrid1.Cells[5,4] := inttostr(2);
end;

end.
